angular	.module('app.services')	.factory('StorageService', dataService);function dataService($q, $log, localStorageService) {	var _querys = [],		_tracks = [],		_lastCall = false,		_lastPage = false,		_history = false,		_view = false,		lsQuerys = localStorageService.get('storeQuerys'),		lsHistory = localStorageService.get('storeHistory'),		lsLastCall = localStorageService.get('storeLastCall'),		lsView = localStorageService.get('storeView');	function saveQuerys() {		localStorageService.set('storeQuerys', _querys);	}	function saveHistory() {		localStorageService.set('storeHistory', _history);	}	function saveLastCall() {		localStorageService.set('storeLastCall', _lastCall);	}	function saveView() {		localStorageService.set('storeView', _view);	}	if (lsQuerys !== null) {		_querys = lsQuerys;	}	if (lsHistory !== null) {		_history = lsHistory;	}	if (lsLastCall !== null) {		_lastCall = lsLastCall;	}	if (lsView !== null) {		_view = lsView;	}	function addLastCall(elem) {		var deferred = $q.defer();		saveLastCall();		deferred.resolve(_lastCall = elem);		return deferred.promise;	}	function getLastCall() {		var deferred = $q.defer();		deferred.resolve(_lastCall);		return deferred.promise;	}	function addQuery(data) {		var deferred = $q.defer(),			pushed = _querys.unshift(data);		if (_querys.length >= 6) {			_querys.pop();		}		saveQuerys();		deferred.resolve(pushed);		return deferred.promise;	}	function getQuerys() {		var deferred = $q.defer();		deferred.resolve(_querys);		return deferred.promise;	}	function addTrack (elem) {		var deferred = $q.defer(),			isAlreadyExsist = false;		angular.forEach(_tracks, function(track) {			if (track.id == elem.id) {				isAlreadyExsist = true;			}		});		if (isAlreadyExsist === false) {			if (_tracks.length >= 6) {				_tracks.shift();			}			deferred.resolve(_tracks.push(elem));		} else {			deferred.reject(dataServiceError(error, 'addTrack() trying to add an already existent element'));		}		return deferred.promise;	}	function getTrack (id) {		var deferred = $q.defer();		angular.forEach(_tracks, function(track) {				if (track.id == id) {					deferred.resolve(track);				}		});		return deferred.promise;	}	function addHistory(query) {		var deferred = $q.defer();		_history = query;		saveHistory();		deferred.resolve(_history);		return deferred.promise;	}	function getHistory() {		var deferred = $q.defer();		deferred.resolve(_history);		return deferred.promise;	}	function addLastPage(elem) {		var deferred = $q.defer(),			done;		_lastPage = elem;		done = _lastPage;		deferred.resolve(done);		return deferred.promise;	}	function getLastPage() {		var deferred = $q.defer();		deferred.resolve(_lastPage);		return deferred.promise;	}	function addView(str) {		var deferred = $q.defer();		_view = str;		saveView();		deferred.resolve(_view);		return deferred.promise;	}	function getView() {		var deferred = $q.defer();		deferred.resolve(_view);		return deferred.promise;	}	return {		addQuery: addQuery,		getQuerys: getQuerys,		addTrack: addTrack,		getTrack: getTrack,		addHistory: addHistory,		getHistory : getHistory,		addLastCall: addLastCall,		getLastCall: getLastCall,		addLastPage: addLastPage,		getLastPage: getLastPage,		addView: addView,		getView: getView	};	function dataServiceError(errorResponse) {		$log.error('Storage Failed for StorageService');		$log.error(errorResponse);		return errorResponse;	}}